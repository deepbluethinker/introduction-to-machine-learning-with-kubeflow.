[[who_is_kubeflow_for_ch]]
== What does Kubeflow solve & who’s it for, and how to get started


Kubeflow solves the problem of needing to build portable, reliable, scalable machine learning pipelines and exposing the results.
We hope Kubeflow is the right tool for you, and briefly look at some alternatives in <<alternatives_to_kubeflow>>, but even if it is not learning about Kubeflow can help provide a good mental model of different steps required 

=== Who is Kubeflow for?

Kubeflow is for data scientist and data engineers who wish to avoid the difficulty updating their model with new data, or moving from their laptop to production.
Kubeflow does this by offering a variety of tools in one place, more than just Tensorflow, for all the different stages of a models life (data exploration, feature prep, model training, model serving, and model testing).
These tools can be run either locally for your development or on a production cluster once you are ready.
Many of benefits of using Kubeflow over building your own pipelines manually come from containerization and running on Kubernetes.


Containerization means no more "it worked on my machine" or "just install extra_pip_requirements.txt"
Data Scientist with Python experience can think of containers are a heavy duty virtual enviroment, which not only includes Python includes all of the system around it.
Containers isolate your from the host enviroment, meaning that all dependencies must be explicitly added and you won't accidently start depending on some system packages.
Docker containers also include the operating system they are built on top of, so you don't have to worry about compatability differences between different Linux distributions at run-time.
Docker containers are made out of multiple layers and are easily compossible, so, if for example, there is a container image that has most of what you need (CUDA, etc.) but you also need some extra packages on top of it, you can build a container using another one as the base.
Containers also allow us to have different system libraries between different pipelines (or even stages in the same pipeline!).
Containirizing our machine learning makes it portable and reproducible.

[TIP]
====
You don't need a deep understanding of containers to succeed with Kubeflow, but for those looking to learn more about containers X/Y/Z.
====


Kubernetes in Kubeflow allows our pipelines to be scalable and maintain portability.
With Kubernetes the different stages of your pipeline can request the different resources they need from a cluster, and different versions of your pipeline can run with different resources.
The availability of local versions of Kubernetes means you can even work locally on your laptop with a single node during your prototyping phase.
Since Kubernetes is not just used for data or machine learning jobs, unlike cluster managers like YARN, you can also more effectively share resources with the rest of your organization.


Now one can of course build their own containirzed machine learning pipelines on Kubernetes without using Kubefklow, but Kubeflow aims to make this substantailly easier.
Kubeflow provides an easier partially-standarized interface to the tools you would be likely to use on your own adventure, as well making it easier to configure your pipeline to use cloud accelerations like TPUs (tensor processing units).


[TIP]
====
We talk about who this book is for in <<assumptions_about the audience>> as well as the required background and resources to get up to speed if you need them.
====




[[alternatives_to_kubeflow]]
=== Brief Alternatives to Kubeflow

[[breif_kubeflow_design_and_core_components]]
=== Brief Kubeflow’s design & core components

=== Getting Set Up with Kubeflow

One of the great things about Kubeflow is the ability to do our initial development and exploration locally, moving into more powerful and distributed tools later on.
Deploying Kubeflow locally can be a great way to get started, and gives us access to a few debugging cheats we can use during our initial exploration.
While you can get started with Kubeflow locally, you don't have to, you can just as easily do your initial work with one of the cloud providers or on prem Kubernetes clusters covered in <<appendix_installing>>, although for all but click-to-deploy.

[TIP]
====
Probably the fastest way to get started with Kubeflow is using the simplified click-to-deploy on Google Cloud Platform (GCP). If you're in a rush to get started go ahead and jump to <<gcp_click_to_deploy>>.
====


==== Installing Kubeflow & it's dependencies

Kubeflow has relatively few dependencies, most of the heavy lifting is done inside of containers which ship with their requirements.
Thankfully, Kubeflow's dependencies can be automatically installed along with the optional Minikube by running the install shell script <<mini_kube_setup_sh>>. Even if you don't plan on using Minikube this script simplifies the rest of the set up.

[[mini_kube_setup_sh]]
.Automatically install Kubeflow's dependencies & Minikube
[source, shell]
----
include::examples/dev-setup/install-kf-and-minikube.sh[tags=work]
----

[TIP]
====
If this fails to X/Y/Z, don't worry we'll cover how to fix that up in <<setting_up_minikube>>.
====



[WARNING]
====
This will modify your system packages installing and require root/super user permissions. If you wish you can instead run these commands on another host (e.g. dedicated KF development enviroment).
====

If you don't want to install Minikube, you can manually install Kubeflow's dependencies: ksonnet and kubectl. Even if you have these installed, you will want to check that you have the right versions installed for your version of Kubeflow.
// TODO(holden): Where? Release notes?
Ksonnet is on github, with it's release posted at link:$$https://github.com/ksonnet/ksonnet/releases$$[https://github.com/ksonnet/ksonnet/releases], and you can install it with <<install_ksonnet_sh>>.

[[install_ksonnet_sh]]
.Install ksonnet
[source, shell]
----
include::examples/dev-setup/install-ksonnet-and-kubectl.sh[tags=ksonnet]
----



Kubectl is more widely packaged, with the different installation options covered in the link:$$https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl$$[kubernetes documentation https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl]. Ubuntu (snap) <<install_kubectl_snap>> and Homebrew users can install Kubectl <install_kubectl_homebrew>> the simplest with package manager, with others covered in the guide.
Kubectl can also be installed outside of your package manager <<install_kubectl_curl>>, although this requires manual updating.

[[install_kubectl_snap]]
.Install kubectl with snap
[source, shell]
----
include::examples/dev-setup/install-ksonnet-and-kubectl.sh[tags=ubuntu-kubectl]
----

[[install_kubectl_homebrew]]
.Install kubectl with homebrew
[source, shell]
----
include::examples/dev-setup/install-ksonnet-and-kubectl.sh[tags=osx-kubectl]
----

[[install_kubectl_curl]]
.Install kubectl without a package manager
[source, shell]
----
include::examples/dev-setup/install-ksonnet-and-kubectl.sh[tags=no-pkg-manager-kubectl]
----




Once you have the dependencies installed, you can now install Kubeflow with <<install_kf_sh>>, and optionally add it to your path.

[[install_kf]]
.Install Kubeflow
[source, shell]
----
include::examples/dev-setup/install-kf.sh[tags=no-pkg-manager-install]
----

You now have Kubeflow installed! There are some additional optional tools you can set up to make the rest of this book easier we will cover next.

[[setting_up_minikube]]
==== Finishing setting up Kubeflow on Minikube (optional)

The Kubeflow project has a link:$$https://www.kubeflow.org/docs/started/getting-started-minikube/$$[frequently updated guide on how to install Kubeflow with Minikube at https://www.kubeflow.org/docs/started/getting-started-minikube/].
You don't need to have a local Kubernetes cluster, but many data scientists and developers find having a local cluster to test with (be it Minikube or other).
// TODO: other local k8s options



==== Setting up your Kubeflow development enviroment

In addition to the core dependencies you may find some additional tools useful.
Much of Kubernets and Kubeflow is configured with
either link:$$https://yaml.org/$$[YAML Ain't Markup Language (YAML)]
or link:$$https://ksonnet.io/$$[ksonnet] (which is an extension of link:$$https://jsonnet.org/$$[Jsonnet]).

[TIP]
====
This part is optional, if it ends up being frustrating or slowing you down feel free to skip ahead.
====


Inside of the Kubeflow project, the Jsonnet library is used to automatically format Ksonnet into a standard layout. This autoformatter can also catch syntax errors or other simple errors earlier on in the deploy. The jsonnet package link:$$https://github.com/google/jsonnet/releases$$[releases are available on GitHub] <<jsonnet_manual>>, link:$$https://snapcraft.io/$$[Snap] <<jsonnet_snap>> (from Canonical). It is also listed on PyPi, but currently does not install the command line tools. Some of the IDE tools for Jsonnet depend on the command line binary.

[[jsonnet_snap]]
.Install jsonnet with snap (Ubuntu)
====
[source, shell]
----
include::examples/dev-setup/jsonnet.sh[tags=snap]
----
====

[[jsonnet_manual]]
.Install jsonnet manually (everyone else)
====
[source, shell]
----
include::examples/dev-setup/jsonnet.sh[tags=manual]
----
====


Most Integrated Development Enviroments (IDEs) offer some sort of tooling for editing YAML and Jsonnet, but you may have to install these seperately.
For InteliJ //TODO(trevor)
For emacs there are many modes available for YAML editing, as well as the link:$$jsonnet-mode$$[jsonnet] (which is installable from link:$https://melpa.org/$$[Milkypostman’s Emacs Lisp Package Archive (MELPA)]).
Atom has syntax highlighting available as packages for both link:$$https://atom.io/packages/language-yaml$$[YAML] and link:$$https://atom.io/packages/language-jsonnet$$[Jsonnet].
If you use a different IDE don't throw it away just for better ksonnet editing before you explore the plugin available.






[TIP]
====
If you get stuck here, or if your permissions/policies don't allow you to use minikube, just jump on over to <<appendix_installing>> and you can deploy your Kubeflow app's against your remote K8s cluster. 
====


=== Getting Help / Community Resources

We are so glad you've decided to use this book to start your adventures into Kubeflow.
However, like all adventures, there may come a point when your guide book isn't enough to carry you through.
Thankfully there are a collection of community resources where you can interact with others on similar adventures to your own.
We encourage you to sign up for the link:$$http://kubeflow.slack.com$$[Kubeflow slack at http://kubeflow.slack.com], one of the more active areas of discussion, now since account approval is semi-manual.
The link:$$https://www.kubeflow.org/$$[kubeflow project page is at https://www.kubeflow.org/].

[TIP]
====
If you want to quickly explore Kubeflow end-to-end there are some link:$$https://codelabs.developers.google.com/$$[Google codelabs] with Kubeflow as well.
====

=== Conclusion

At this point you have everything you need to get started on your Kubeflow adventure: a Kubernetes cluster, Kubeflow and it's core dependencies, and a desire to have fun.
In the next chapter <<simple_training_ch>>, we'll train and serve a relatively simple machine learning model together to give you an idea of how the basics of how to use Kubeflow.
